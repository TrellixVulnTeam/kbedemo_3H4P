//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class KBEMainWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(KBEMain), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("initKBEngine", initKBEngine);
		L.RegFunction("_closeNetwork", _closeNetwork);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("debugLevel", get_debugLevel, set_debugLevel);
		L.RegVar("isStartEngine", get_isStartEngine, set_isStartEngine);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int initKBEngine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			KBEMain obj = (KBEMain)ToLua.CheckObject<KBEMain>(L, 1);
			obj.initKBEngine();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _closeNetwork(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			KBEMain obj = (KBEMain)ToLua.CheckObject<KBEMain>(L, 1);
			KBEngine.NetworkInterface arg0 = (KBEngine.NetworkInterface)ToLua.CheckObject<KBEngine.NetworkInterface>(L, 2);
			obj._closeNetwork(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEMain obj = (KBEMain)o;
			KBEngine.DEBUGLEVEL ret = obj.debugLevel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isStartEngine(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, KBEMain.isStartEngine);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			KBEMain obj = (KBEMain)o;
			KBEngine.DEBUGLEVEL arg0 = (KBEngine.DEBUGLEVEL)ToLua.CheckObject(L, 2, typeof(KBEngine.DEBUGLEVEL));
			obj.debugLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isStartEngine(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			KBEMain.isStartEngine = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

